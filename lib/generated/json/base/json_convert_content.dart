// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:web_socket/data/transaction_entity.dart';
import 'package:web_socket/generated/json/transaction_entity_helper.dart';
import 'package:web_socket/data/block_chain_entity.dart';
import 'package:web_socket/generated/json/block_chain_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case TransactionEntity:
			return transactionEntityFromJson(data as TransactionEntity, json) as T;			case TransactionX:
			return transactionXFromJson(data as TransactionX, json) as T;			case TransactionXInput:
			return transactionXInputFromJson(data as TransactionXInput, json) as T;			case TransactionXInputsPrevOut:
			return transactionXInputsPrevOutFromJson(data as TransactionXInputsPrevOut, json) as T;			case TransactionXOut:
			return transactionXOutFromJson(data as TransactionXOut, json) as T;			case BlockChainEntity:
			return blockChainEntityFromJson(data as BlockChainEntity, json) as T;			case BlockChainX:
			return blockChainXFromJson(data as BlockChainX, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case TransactionEntity:
			return transactionEntityToJson(data as TransactionEntity);			case TransactionX:
			return transactionXToJson(data as TransactionX);			case TransactionXInput:
			return transactionXInputToJson(data as TransactionXInput);			case TransactionXInputsPrevOut:
			return transactionXInputsPrevOutToJson(data as TransactionXInputsPrevOut);			case TransactionXOut:
			return transactionXOutToJson(data as TransactionXOut);			case BlockChainEntity:
			return blockChainEntityToJson(data as BlockChainEntity);			case BlockChainX:
			return blockChainXToJson(data as BlockChainX);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'TransactionEntity':
			return TransactionEntity().fromJson(json);			case 'TransactionX':
			return TransactionX().fromJson(json);			case 'TransactionXInput':
			return TransactionXInput().fromJson(json);			case 'TransactionXInputsPrevOut':
			return TransactionXInputsPrevOut().fromJson(json);			case 'TransactionXOut':
			return TransactionXOut().fromJson(json);			case 'BlockChainEntity':
			return BlockChainEntity().fromJson(json);			case 'BlockChainX':
			return BlockChainX().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'TransactionEntity':
			return List<TransactionEntity>();			case 'TransactionX':
			return List<TransactionX>();			case 'TransactionXInput':
			return List<TransactionXInput>();			case 'TransactionXInputsPrevOut':
			return List<TransactionXInputsPrevOut>();			case 'TransactionXOut':
			return List<TransactionXOut>();			case 'BlockChainEntity':
			return List<BlockChainEntity>();			case 'BlockChainX':
			return List<BlockChainX>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}